##Wear
w1<- rep(NA,nbr)
w2<- rchisq(nbr,4)
w3<- rchisq(nbr,7)
wear<-c(w1,w2,w3)
rm(w1,w2,w3)
##Establish Group Numbers
group<- c(rep(1,nbr),rep(2,nbr),rep(3,nbr))
##Make a dataframe
df <-data.frame(speed=speed, cycle=cycle, wear=wear, group=group)
rm(speed,cycle,wear,group)
hist(df$speed)
hist(df$cycle)
hist(df$wear)
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=T),na.rm=1))
hist(means_speed, main="Sampling Distribution")
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
means_cycle <- replicate(nbrsamples,mean(sample(df$cycle,sampsize,replace=T),na.rm=1))
hist(means_cycle, main="Sampling Distribution")
rug(means_cycle)
abline(v=mean(df$cycle,na.rm=1),col="red")
means_wear <- replicate(nbrsamples,mean(sample(df$wear,sampsize,replace=T),na.rm=1))
hist(means_wear, main="Sampling Distribution")
rug(means_wear)
abline(v=mean(df$wear,na.rm=1),col="red")
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=T),na.rm=1))
hist(means_speed, main="Sampling Distribution")
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
means_cycle <- replicate(nbrsamples,mean(sample(df$cycle,sampsize,replace=T),na.rm=1))
hist(means_cycle, main="Sampling Distribution")
rug(means_cycle)
abline(v=mean(df$cycle,na.rm=1),col="red")
means_wear <- replicate(nbrsamples,mean(sample(df$wear,sampsize,replace=T),na.rm=1))
hist(means_wear, main="Sampling Distribution")
rug(means_wear)
abline(v=mean(df$wear,na.rm=1),col="red")
hist(df$speed)
hist(df$cycle)
hist(df$wear)
summary(df)
ummary(means_speed)
summary(means_cycle)
summary(means_wear)
summary(means_speed)
summary(means_cycle)
summary(means_wear)
hist(df$speed)
rug(df$speed)
hist(df$cycle)
rug(df$cycle)
hist(df$wear)
rug(df$wear)
hist(df$speed)
rug(df$speed)
hist(df$cycle)
rug(df$cycle)
hist(df$wear)
rug(df$wear)
hist(df$speed)
rug(df$speed)
abline(v=mean(df$speed,na.rm=1),col="red")
hist(df$cycle)
rug(df$cycle)
abline(v=mean(df$cycler,na.rm=1),col="red")
hist(df$wear)
rug(df$wear)
abline(v=mean(df$wear,na.rm=1),col="red")
hist(df$speed)
rug(df$speed)
abline(v=mean(df$speed,na.rm=1),col="red")
hist(df$cycle)
rug(df$cycle)
abline(v=mean(df$cycle,na.rm=1),col="red")
hist(df$wear)
rug(df$wear)
abline(v=mean(df$wear,na.rm=1),col="red")
if (!require("Hmisc")){
install.packages("Hmisc")
}
if (!require("xtable")){
install.packages("table")
}
nbr = 10000 ##Number of observations for each group
sampsize = 20 #Size of samples
nbrsamples = 5000 #how many samples
##Create the data Three attributes
##Speed
s1<- rnorm(nbr,70,15)
s2<- rep(NA,nbr)
s3<- rnorm(nbr,20,4)
speed<-c(s1,s2,s3)
rm(s1,s2,s3)
##Cycles
c1<- rbinom(nbr,3,.6)
c2<- rbinom(nbr,3,.4)
c3<- rep(NA,nbr)
cycle<-c(c1,c2,c3)
rm(c1,c2,c3)
##Wear
w1<- rep(NA,nbr)
w2<- rchisq(nbr,4)
w3<- rchisq(nbr,7)
wear<-c(w1,w2,w3)
rm(w1,w2,w3)
##Establish Group Numbers
group<- c(rep(1,nbr),rep(2,nbr),rep(3,nbr))
##Make a dataframe
df <-data.frame(speed=speed, cycle=cycle, wear=wear, group=group)
rm(speed,cycle,wear,group)
means_cycle <- replicate(nbrsamples,mean(sample(df$cycle,sampsize,replace=T),na.rm=1))
hist(means_cycle, main="Sampling Distribution")
rug(means_cycle)
abline(v=mean(df$cycle,na.rm=1),col="red")
means_wear <- replicate(nbrsamples,mean(sample(df$wear,sampsize,replace=T),na.rm=1))
hist(means_wear, main="Distribution of expression(paste(nbrsample)Sample Mean")
rug(means_wear)
means_wear <- replicate(nbrsamples,mean(sample(df$wear,sampsize,replace=T),na.rm=1))
hist(means_wear, main="Distribution of", expression(paste(nbrsample),"Sample Mean")
rug(means_wear)
hist(means_wear, main="Distribution of", expression(paste(nbrsample),"Sample Mean")
means_wear <- replicate(nbrsamples,mean(sample(df$wear,sampsize,replace=T),na.rm=1))
hist(means_wear, main="Distribution of", expression(paste(nbrsample)),"Sample Mean")
rug(means_wear)
hist(means_wear, main="Distribution of", expression(nbrsample),"Sample Mean")
rug(means_wear)
hist(means_wear, main="Distribution of expression(nbrsample) Sample Mean")
maintitle="Distribution of Sample Means"
means_cycle <- replicate(nbrsamples,mean(sample(df$cycle,sampsize,replace=T),na.rm=1))
hist(means_cycle, main=maintitle)
rug(means_cycle)
abline(v=mean(df$cycle,na.rm=1),col="red")
maintitle="Distribution of Sample Means from nbrsamples"
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=T),na.rm=1))
hist(means_speed, main=maintitle)
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
?bquote
maintitle=paste0("Distribution of Sample Means from ",nbrsamples)
hist(means_speed, main=maintitle)
?paste0
maintitle=paste0("Distribution of ",nbrsamples,"Sample Means from ")
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=T),na.rm=1))
hist(means_speed, main=maintitle)
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
maintitle=paste0("Distribution of ",nbrsamples," Sample Means from size of ", sampsize)
means_cycle <- replicate(nbrsamples,mean(sample(df$cycle,sampsize,replace=T),na.rm=1))
hist(means_cycle, main=maintitle)
rug(means_cycle)
abline(v=mean(df$cycle,na.rm=1),col="red")
maintitle=paste0("Distribution of ",nbrsamples," Sample Means /n from a Sample Size of ", sampsize)
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=T),na.rm=1))
hist(means_speed, main=maintitle)
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
maintitle=paste0("Distribution of ",nbrsamples," Sample Means \n from a Sample Size of ", sampsize)
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=T),na.rm=1))
hist(means_speed, main=maintitle)
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
means_wear <- replicate(nbrsamples,mean(sample(df$wear,sampsize,replace=T),na.rm=1))
hist(means_wear, main=maintitle)
rug(means_wear)
abline(v=mean(df$wear,na.rm=1),col="red")
summary(means_speed)
summary(means_cycle)
summary(means_wear)
idr.display(model.poisson)
install.packages("epicalc")
if(!require("epicalc"){
install.packages("epicalc")
}
## Load in reproducible data
data(DHF99)
## Create model
model.poisson <- glm(containers ~ education + viltype,
family=poisson, data=DHF99)
## Standard summary
summary(model.poisson)
## IRRs and IRR confidence levels by simple exponentiation
exp(coef(model.poisson))
exp(confint(model.poisson))
## IRRs by epicalc's summary function
idr.display(model.poisson)
source('~/GitHub/MyWork/RRR.R')
source('~/GitHub/MyWork/RRR.R')
source('~/GitHub/MyWork/RRR.R')
source('~/GitHub/MyWork/RRR.R')
summary(model.poisson)
exp(coef(model.poisson))
exp(confint(model.poisson))
source('~/GitHub/MyWork/RRR.R')
idr.display(model.poisson)
csi
?csi
csi 262 150 134 83
csi 112 150 51 83
csi (112, 150, 51, 83)
csi (150, 83, 112, 51)
csi (150, 112, 83, 51)
csi (150, 112, 83, 51,or)
cci (150, 112, 83, 51)
csi(13,40,167,143)
csi(13,167,40,143)
csi(13,167,40,143, exact)
?csi
csi(13,167,40,143, decimal=4)
cci(13,167,40,143, decimal=4)
cii(52,50)
cci(52,50)
library(survival)
library(ISwR)
install.packages("ISwr")
install.packages("ISwR")
library(ISwR)
str(melanom)
?survival
if (!require("epicalc")){
install.packages("epicalc")
}
csi(115,35,18,97)
csi(115,35,18,132)
cci(115,35,18,132)
library(survival)
stime<-c(3,4,7,8,9,11,14,16,21,24)
stime<-c(3,4,7,8,9,11,14,16,21,24)
stime<-c(3,4,7,8,9,11,14,16,21,24,24)
sstatus<-c(1,0,1,0,1,1,1,0,1,0,0)
Surv(stime,sstatus)
Surv(alm$stime,alm$sstatus)
summary(survfit(Surv(stime,sstatus)))
survfit(Surv(stime,sstatus))
Surv(stime,sstatus)~1
?Surv
with(lung, Surv(time, status))
survfit(Surv(stime,sstatus))
?surfit
?survfit
fit <- survfit(Surv(time, status) ~ x, data = aml)
plot(fit, lty = 2:3)
legend(100, .8, c("Maintained", "Nonmaintained"), lty = 2:3)
data(aml)
str(aml)
head(aml)
fit <- survfit(Surv(time, status) ~ x, data = aml)
sstatus
aml$status
aml$time
stime
Surv(aml$time,$amlstatus)
Surv(aml$time,aml$status)
Surv(stime,sstatus)
fit <- survfit(Surv(time, status), data = aml)
fit <- survfit(Surv(time, status)~x, data = aml)
fit <- survfit(Surv(time, status), data = aml)
aml$x
aml
?aml
x <-factor(Yes,No)
x <-factor("Yes","No")
fit <- survfit(Surv(stime, sstatus)~x)
x <-factor(rep("Yes","No"),10)
fit <- survfit(Surv(stime, sstatus)~x)
x <-factor(rep("Yes","No"),11)
x
x <-rep(facor("YES"),11)
x <-rep(factor("YES"),11)
fit <- survfit(Surv(stime, sstatus)~x)
fit
fit <- survfit(Surv(stime, sstatus) ~ x)
fit
plot(fit)
summary(survfit(Surv(stime, sstatus) ~ x))
summary(survfit(Surv(stime, sstatus)))
summary(survfit(Surv(stime, sstatus) ~ x))
x <- factor(sstatus, labels = c("private", "public"))
x
summary(survfit(Surv(stime, sstatus)))
summary(survfit(Surv(stime, sstatus) ~ x))
summary(survfit(Surv(stime, sstatus) ~ x))
factor(schtyp, labels = c("private", "public"))
y <- factor(status, labels = c("Jail", "NoJail"))
status<-c(1,0,1,0,1,1,1,0,1,0,0)
y <- factor(status, labels = c("Jail", "NoJail"))
factor(schtyp, labels = c("private", "public"))
summary(survfit(Surv(stime, status) ~ y))
fit <- survfit(Surv(stime, status) ~ y)
fit
x <- rep(1,11)
fit <- survfit(Surv(stime, status) ~ x)
fit
summary(survfit(Surv(stime, status) ~ x))
summary(survfit(Surv(stime, status) ~ x))
fit <-survfit(Surv(stime, status) ~ x))
plot(fit)
fit <-survfit(Surv(stime, status) ~ x)
plot(fit)
summary(fit)
fit
5/6
?survival
fit <-survfit(Surv(stime, status) ~ y)
summary(fit)
plot(fit)
fit
plot(fit, main="Kaplan-Meier estimate with 95% confidence bounds", xlab="time", ylab="survival function")
##Run the survival analysis
fit <-survfit(Surv(stime, status) ~ x)
plot(fit, main="Kaplan-Meier estimate with 95% confidence bounds", xlab="time", ylab="survival function")
surdiff(Surv(stime, status) ~ x)
survdiff(Surv(stime, status) ~ x)
survdiff(Surv(stime, status) ~ y)
x <- rep(1,lenght(status))
x <- rep(1,len(status))
length(status)
x <- rep(1,length(status))
#Set the times in order
stime<-c(3,4,7,8,9,11,14,16,21,24,24)
#Set the status 1 = back in jail
status<-c(1,0,1,0,1,1,1,0,1,0,0)
#Set a Factor if more than 1 group
y <- factor(status, labels = c("Treatment", "NoTreatment"))
# Only one group so set a variable to use
x <- rep(1,length(status))
##Run the survival analysis
fit <-survfit(Surv(stime, status) ~ x)
summary(fit)
attach(tongue)
survdiff(Surv(stime, status) ~ 1)
survfit(Surv(stime, status) ~ 1)
fit <-survfit(Surv(stime, status) ~ 1)
summary(fit)
if (!require("epicalc")){
install.packages("epicalc")
}
if (!require("survival")){
install.packages("survival")
}
stime<-c(3,4,7,8,9,11,14,16,21,24,24)
#Set the status 1 = back in jail
status<-c(1,0,1,0,1,1,1,0,1,0,0)
y <- factor(status, labels = c("Treatment", "NoTreatment"))
plot(fit, main="Kaplan-Meier estimate with 95% confidence bounds", xlab="time", ylab="survival function")
fit <-survfit(Surv(stime, status) ~ y)
plot(fit, main="Kaplan-Meier estimate with 95% confidence bounds", xlab="time", ylab="survival function")
plot(fit, main="Kaplan-Meier estimate \nwith 95% confidence bounds", xlab="time", ylab="survival function")
cci(115,35,18,132)
?cci
data(Oswego)
use(Oswego)
cc(ill, chocolate)
cc(ill, chocolate, design="case-control")
cs(ill, chocolate) # The outcome variable should come first.
cci(25, 22, 20, 7)
graph.casecontrol(25, 22, 20, 7)
graph.prospective(25, 22, 20, 7)
cci(115,35,18,132)
graphcasecontrol(115,35,18,132)
graph.casecontrol(115,35,18,132)
graph.prospective(115,35,18,132)
if (!require("Hmisc")){
install.packages("Hmisc")
}
if (!require("xtable")){
install.packages("table")
}
nbr = 10000 ##Number of observations for each group
sampsize = 20 #Size of samples
nbrsamples = 5000 #how many samples
##Create the data Three attributes
##Speed
s1<- rnorm(nbr,70,15)
s2<- rep(NA,nbr)
s3<- rnorm(nbr,20,4)
speed<-c(s1,s2,s3)
rm(s1,s2,s3)
##Cycles
c1<- rbinom(nbr,3,.6)
c2<- rbinom(nbr,3,.4)
c3<- rep(NA,nbr)
cycle<-c(c1,c2,c3)
rm(c1,c2,c3)
##Wear
w1<- rep(NA,nbr)
w2<- rchisq(nbr,4)
w3<- rchisq(nbr,7)
wear<-c(w1,w2,w3)
rm(w1,w2,w3)
##Establish Group Numbers
group<- c(rep(1,nbr),rep(2,nbr),rep(3,nbr))
##Make a dataframe
df <-data.frame(speed=speed, cycle=cycle, wear=wear, group=group)
rm(speed,cycle,wear,group)
maintitle=paste0("Distribution of ",nbrsamples," Sample Means \n from a Sample Size of ", sampsize)
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=T),na.rm=1))
hist(means_speed, main=maintitle)
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=withreplace),na.rm=1))
hist(means_speed, main=maintitle)
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
withreplace = "F" #With replacement T or F
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=withreplace),na.rm=1))
hist(means_speed, main=maintitle)
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
means_speed <- replicate(nbrsamples,mean(sample(df$speed,sampsize,replace=withreplace),na.rm=1))
hist(means_speed, main=maintitle)
rug(means_speed)
abline(v=mean(df$speed,na.rm=1),col="red")
csi(45,96,63,63)
cci(45,96,63,63)
cci(45,96,63,62)
csi(45,96,63,62)
if (!require("epicalc")){
install.packages("epicalc")
}
if (!require("survival")){
install.packages("survival")
}
csi (150, 112, 83, 51)
#Set the times in order
stime<-c(3,4,7,8,9,11,14,16,21,24,24)
#Set the status 1 = back in jail
status<-c(1,0,1,0,1,1,1,0,1,0,0)
#Set a Factor if more than 1 group
x <- factor(status, labels = c("Treatment", "NoTreatment"))
##Run the survival analysis with only 1 group
fit <-survfit(Surv(stime, status) ~ 1)
summary(fit)
summary(fit)
plot(fit, main="Kaplan-Meier estimate \nwith 95% confidence bounds", xlab="time", ylab="survival function")
fit
cci(115,35,18,132)
csi(115,35,18,132)
= 6.1 -1
6.1-1
5.1*100
(6.4*100)-100
(24.1*100)-100
library(car)
mtcars
#Change your model name because log is also a function
logodds <- glm(vs ~ mpg + am, data=mtcars, family=binomial)
summary(logodds)
library(ggplot2)
new.data = with(mtcars, expand.grid(am = unique(am),
mpg = seq(min(mpg), max(mpg))))
new.data$vs <- predict.glm(logodds, newdata = new.data, type = "response")
ggplot(new.data, aes(mpg, vs, colour = am)) + geom_line(aes(group = am))
new.data = with(mtcars, expand.grid(am = unique(am),mpg = seq(min(mpg), max(mpg))))
new.data$vs <- predict.glm(logodds, newdata = new.data, type = "response")
ggplot(new.data, aes(mpg, vs, colour = am)) + geom_line(aes(group = am))
install.packages("Quandl")
library(Quandl)
Quandl("FRED/UNRATE", trim_start="1948-01-01", trim_end="2014-10-01", authcode="eKbeRVv8uqJ5kr2eDFJ6")
df<-Quandl("FRED/UNRATE", trim_start="1948-01-01", trim_end="2014-10-01", authcode="eKbeRVv8uqJ5kr2eDFJ6")
plot(df)
plot(df, type="l")
Quandl("FRED/GDP", trim_start="1947-01-01", trim_end="2014-07-01", authcode="eKbeRVv8uqJ5kr2eDFJ6")
df2 <-Quandl("FRED/GDP", trim_start="1947-01-01", trim_end="2014-07-01", authcode="eKbeRVv8uqJ5kr2eDFJ6")
plot(df2, type="l")
Quandl.auth("yourauthenticationtoken")
mytimeseries = Quandl("NSE/OIL", type="ts")
# Turn off scientific notations for numbers
options(scipen = 999)
#Set locale
Sys.setlocale("LC_ALL", "English")
zip.file <- 'stormData.csv.bz2'
if (!file.exists(zip.file))
{
data.url <- 'http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2'
download.file(data.url, zip.file)
downloadedDataDate <- date()
}
##Read and process the data
data <- read.csv(bzfile(zip.file),header=TRUE, stringsAsFactors = FALSE)
names(data) <- tolower(names(data))     ##make all column names lowercase
names(data) <- gsub("_","",names(data)) ##remove underscores
##Add a year column if it does not exist
if (dim(data)[2] == 37)
{
data$year <- as.numeric(format(as.Date(data$bgndate, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
}
##Process the property damage
data$propdmgexp <- as.character(data$propdmgexp)
data$propdmgexp[toupper(data$propdmgexp) == 'H'] <- "2"
data$propdmgexp[toupper(data$propdmgexp) == 'K'] <- "3"
data$propdmgexp[toupper(data$propdmgexp) == 'M'] <- "6"
data$propdmgexp[toupper(data$propdmgexp) == 'B'] <- "9"
data$propdmgexp <- as.numeric(data$propdmgexp)
data$propdmgexp[is.na(data$propdmgexp)] <- 0
data$totalpropdmg <- data$propdmg * 10^data$propdmgexp
##Process the crop damage
data$cropdmgexp <- as.character(data$cropdmgexp)
data$cropdmgexp[toupper(data$cropdmgexp) == 'H'] <- "2"
data$cropdmgexp[toupper(data$cropdmgexp) == 'K'] <- "3"
data$cropdmgexp[toupper(data$cropdmgexp) == 'M'] <- "6"
data$cropdmgexp[toupper(data$cropdmgexp) == 'B'] <- "9"
data$cropdmgexp <- as.numeric(data$cropdmgexp)
data$cropdmgexp[is.na(data$cropdmgexp)] <- 0
data$totalcropdmg <- data$cropdmg * 10^data$cropdmgexp
##Set the years in the print title
maintitle=paste0("For the years ",min(data$year)," to ", max(data$year))
options(rpubs.upload.method = "internal")
getwd()
setwd("~/GitHub/RepData_PeerAssessment2")
C:/Users/bryan_000/Documents/GitHub/R
options(rpubs.upload.method = "internal")
